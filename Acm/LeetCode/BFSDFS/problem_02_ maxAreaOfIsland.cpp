/**
 * 
 * 
 * 题目叙述：
给定一个包含了一些 0 和 1的非空二维数组 grid , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。
找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)

示例1：
示例 1:
[[0,0,1,0,0,0,0,1,0,0,0,0,0],
[0,0,0,0,0,0,0,1,1,1,0,0,0],
[0,1,1,0,1,0,0,0,0,0,0,0,0],
[0,1,0,0,1,1,0,0,1,0,1,0,0],
[0,1,0,0,1,1,0,0,1,1,1,0,0],
[0,0,0,0,0,0,0,0,0,0,1,0,0],
[0,0,0,0,0,0,0,1,1,1,0,0,0],
[0,0,0,0,0,0,0,1,1,0,0,0,0]]
对于上面这个给定矩阵应返回 6。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。
示例 2:
[[0,0,0,0,0,0,0,0]]
对于上面这个给定的矩阵, 返回 0。

 * 
 * 
 * 
 * */
 
 //直接统计面积 修改max
//bfs
if (grid[i][j] == 1 && !visited[i][j])
{
  // todo
  int area = 1; // this line
  while (!q.empty())
  {
 // todo
    for (int k = 0; k < 4; k++)
    {
      // todo
      if (inArea(newX, newY) && !visited[newX][newY] && grid[newX][newY] == 1)
      {
        area++; // this line
      }
    }
  }
  ans = max(ans, area); // this line
}

//dfs

if (grid[i][j] == 1 && !visited[i][j])
{
  int area = dfs(grid, i, j);
  ans = max(ans, area);  // this line
}